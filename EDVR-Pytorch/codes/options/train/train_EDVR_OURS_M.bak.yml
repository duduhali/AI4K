#### general settings
name: 001_EDVR_OURS                     # ** 实验名
use_tb_logger: true
model: VideoSR_base
distortion: sr
scale: 4
gpu_ids: [0]                            # ** 因为小编实验室比较羞涩，所以只能用一张卡训练哈~

#### datasets
datasets:
  train:
    name: REDS
    mode: REDS
    interval_list: [1]                  # 帧的采样频率，是: ..., t-2k, t-k, t, t+k, t+2k, ...
    random_reverse: false
    border_mode: false
    dataroot_GT: ./../datasets/train_gt_wval.lmdb
    dataroot_LQ: ./../datasets/train_input_wval.lmdb
                                        # ** 修改训练数据的路径，指向上面我们生成的lmdb文件，因为这个命令是要给./EDVR/codes/train.py使用的，所以我们需要基于./EDVR/codes/去定义相对路径
    cache_keys: meta_info.pkl           # ** 前面我们复制的meta_info.pkl

    N_frames: 5
    use_shuffle: true
    n_workers: 3  # per GPU
    batch_size: 16                      # ** batch size不要太大，不然一张卡吃不消，土豪实验室多卡分布请随意~
    GT_size: 256
    LQ_size: 256                        # ** 注意在deblur任务中，输入与输出的size是一样的
    use_flip: true
    use_rot: true
    color: RGB

#### network structures 网络结构
network_G:
  which_model_G: EDVR
  nf: 64
  nframes: 5
  groups: 8
  front_RBs: 5
  back_RBs: 10
  predeblur: true                                                      # ** 是否使用一个预编码层，它的作用是对输入 HxW 经过下采样得到 H/4xW/4 的feature，以便符合后面的网络
  HR_in: true                                                          # ** 很重要！！只要你的输入与输出是同样分辨率，就要求设置为true
  w_TSA: true                                                          # ** 是否使用TSA模块

#### path
path:
  pretrain_model_G: ~                   # ~ 表示的是None
  strict_load: true
  resume_state: ~

#### training settings: learning rate scheme, loss
train:
  lr_G: !!float 4e-4
  lr_scheme: CosineAnnealingLR_Restart
  beta1: 0.9
  beta2: 0.99
  niter: 600000
  warmup_iter: -1  # -1: no warm up
  T_period: [150000, 150000, 150000, 150000]
  restarts: [150000, 300000, 450000]
  restart_weights: [1, 1, 1]
  eta_min: !!float 1e-7

  pixel_criterion: cb
  pixel_weight: 1.0
  val_freq: !!float 2e3

  manual_seed: 0

#### logger
logger:
  print_freq: 10                                                       # 每多少个iterations打印日志
  save_checkpoint_freq: !!float 2e3                                    # 每多少个iterations保存模型